{
    "id": "nzzbLXcUjoXZOUQ0KmUf",
    "name": "sgt",
    "task": {
        "tests": [],
        "hints": []
    },
    "content": [
        {
            "type": "snippet",
            "lines": [
                " SU_PREFIX=\"sudo su - postgres -c \"",
                " COMMAND_PREFIX=\"psql -U postgres -d\"",
                " TEMPLATE_DB=\"template1\"",
                "*existing_user=$(${SU_PREFIX} \"${COMMAND_PREFIX} ${TEMPLATE_DB} -c \\\"SELECT usename FROM pg_catalog.pg_user WHERE usename = '${DB_USER}';\\\" --tuples-only\")",
                " ",
                "*if [ ! -z \"$existing_user\" ]",
                "*then",
                "*    echo \"User already exists, not creating\"",
                "*else",
                "*    echo \"Creating user ${DB_USER}...\"",
                "*    ${SU_PREFIX} \"${COMMAND_PREFIX} ${TEMPLATE_DB} -c \\\"create user ${DB_USER} password 'qarax';\\\"\"",
                "*fi",
                " ",
                " existing_db=$(${SU_PREFIX} \"${COMMAND_PREFIX} ${TEMPLATE_DB} -c \\\"SELECT datname FROM pg_database WHERE datname = '${DB_NAME}';\\\" --tuples-only\")",
                " if [ ! -z \"$existing_db\" ]",
                " then",
                "*    echo \"Database already exists, not creating\"",
                "+",
                "*else",
                "     ${SU_PREFIX} \"${COMMAND_PREFIX} ${TEMPLATE_DB} -c \\\"create database ${DB_NAME} owner ${DB_USER} template template0",
                "     encoding 'UTF8' lc_collate 'en_US.UTF-8' lc_ctype 'en_US.UTF-8';\\\"\"",
                "     ${SU_PREFIX} \"${COMMAND_PREFIX} \"${DB_NAME}\" -c \\\"CREATE EXTENSION \\\"pgcrypto\\\";\\\"\""
            ],
            "firstLineNumber": 4,
            "path": "scripts/create_db.sh",
            "comments": [],
            "text": "trgtrsg"
        },
        {
            "type": "snippet",
            "lines": [
                " ",
                " echo \"Executing tests...\"",
                " \"${current_dir}\"/create_db.sh qarax_test qarax > /dev/null 2>&1",
                "*RUST_TEST_THREADS=1 cargo test 2> /dev/null",
                "+RUST_TEST_THREAD",
                "*",
                "*echo \"Finished running tests, cleaning up...\"",
                "*psql -U postgres -d template1 -c \"drop database ${DB_NAME}\" > /dev/null 2>&1",
                "*exit 0"
            ],
            "firstLineNumber": 5,
            "path": "scripts/run_tests.sh",
            "comments": []
        },
        {
            "type": "snippet",
            "lines": [
                " use crate::create_backend;",
                "*use crate::database::DbConnection;",
                "+use cr",
                "*",
                "*use rocket::local::Client;",
                " ",
                " embed_migrations!();",
                " "
            ],
            "firstLineNumber": 1,
            "path": "src/common.rs",
            "comments": []
        },
        {
            "type": "snippet",
            "lines": [
                "         .attach(DbConnection::fairing())",
                "         .mount(mount, routes);",
                " ",
                "*    let conn = DbConnection::get_one(&rocket).expect(\"Database connection failed\");",
                "*    embedded_migrations::run(&*conn).expect(\"Failed to run migrations\");",
                "*    let client = Client::new(rocket).expect(\"Failed to get client\");",
                "*    (client, conn)",
                "*}"
            ],
            "firstLineNumber": 12,
            "path": "src/common.rs",
            "comments": [],
            "text": "rstgrtg"
        }
    ],
    "symbols": {},
    "file_version": "2.0.0",
    "meta": {
        "app_version": "0.3.9-6",
        "file_blobs": {
            "scripts/create_db.sh": "ae9a7e74d2f23e2866277586f5dff4a4075b17b3",
            "scripts/run_tests.sh": "4af6981cead5a1893e2bcd4305ff5bf2020129b8",
            "src/common.rs": "c667e044cc88bb6697353732953048d21b2ae9fa"
        }
    }
}
