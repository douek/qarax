{
    "id": "D4IFPZpZXVKobeSDF4EV",
    "name": "dsfsd",
    "task": {
        "dod": "asdsa",
        "tests": [
            "jfgjhghj"
        ],
        "hints": [
            "hint"
        ]
    },
    "content": [
        {
            "type": "text",
            "text": "sadsa"
        },
        {
            "type": "snippet",
            "lines": [
                "     pub password: String,",
                " }",
                " ",
                "*#[derive(Serialize, Deserialize, Debug)]",
                "*pub struct NewHost {",
                "*    pub name: String,",
                "*    pub address: String,",
                "*    pub port: i32,",
                "*    pub host_user: String,",
                "*    pub password: String,",
                "*}",
                "*",
                "*#[derive(Serialize, Deserialize, Debug, Clone)]",
                "*pub struct InstallHost {",
                "*    pub local_node_path: String,",
                "*",
                "*    #[serde(rename = \"fcversion\")]",
                "*    pub fc_version: String,",
                "*}",
                " ",
                " impl Host {",
                "     pub fn all(conn: &PgConnection) -> Result<Vec<Host>> {"
            ],
            "firstLineNumber": 18,
            "path": "src/models/host.rs",
            "comments": [
                "In this snippet 123"
            ]
        },
        {
            "type": "snippet",
            "lines": [
                "             }",
                "         }",
                "     }",
                "*",
                "*    pub fn by_status(host_status: Status, conn: &PgConnection) -> Result<Vec<Host>> {",
                "*        match hosts.filter(host::status.eq(host_status)).get_results(conn) {",
                "*            Ok(h) => Ok(h),",
                "*            Err(e) => Err(ModelError::NoResults(EntityType::Host, anyhow!(e)).into()),",
                "*        }",
                "*    }",
                "*",
                "     pub fn insert(h: &NewHost, conn: &PgConnection) -> Result<uuid::Uuid> {",
                "         let h = Host::from(h);",
                " "
            ],
            "firstLineNumber": 53,
            "path": "src/models/host.rs",
            "comments": []
        },
        {
            "type": "snippet",
            "lines": [
                "     }",
                " }",
                " ",
                "*impl From<&NewHost> for Host {",
                "*    fn from(nh: &NewHost) -> Self {",
                "*        Host {",
                "*            id: Uuid::new_v4(),",
                "*            name: nh.name.to_owned(),",
                "*            address: nh.address.to_owned(),",
                "*            port: nh.port.to_owned(),",
                "*            host_user: nh.host_user.to_owned(),",
                "*            password: nh.password.to_owned(),",
                "*            status: Status::Down,",
                "*        }",
                "*    }",
                "*}",
                " ",
                " use diesel::deserialize::{self, FromSql};",
                " use diesel::pg::Pg;"
            ],
            "firstLineNumber": 91,
            "path": "src/models/host.rs",
            "comments": []
        },
        {
            "type": "text",
            "text": "sdsa"
        }
    ],
    "symbols": {},
    "file_version": "2.0.1",
    "meta": {
        "app_version": "0.4.1-0",
        "file_blobs": {
            "src/models/host.rs": "1033281fa802df31b6d3f7309269d392c16ad1fd"
        }
    }
}
